---
title: "Piecing Simulation Together"
format: pdf
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
```

```{r}

# create a group of elite athletes who have done well in major competitions within the last two years.

# We are filtering for athletes that have made it within the top 10 in any event in world competitions.
world_elites <- df_women_c %>%
  filter(competition_scope == "World")%>%
  filter(Round != "TeamFinal")%>%
  filter(Round != "TeamQual")%>%
  filter(Rank != 0) %>%
  filter(Rank <= 10)%>%
  distinct(clean_name, clean_country)

# And filtering for any athletes who have placed within top 3 in other competitions.
# for some extraneous reasons, some high level athletes may have chosen not to compete 
# in any world competitions within the last two years.
other_elites <- df_women_c %>%
  filter(competition_scope != "World")%>%
  filter(Round != "TeamFinal")%>%
  filter(Round != "TeamQual")%>%
  filter(Rank != 0) %>%
  filter(Rank <= 3)%>%
  distinct(clean_name, clean_country)

# we join together these two groups to form a group of all the elite athletes
all_elites <- full_join(world_elites, other_elites, by = c("clean_name", "clean_country"))

```

```{r}
# set of qualifying countries (already published on olympics website)
women_country = c("USA", "GBR", "CAN", "CHN", "BRA", "ITA", "NED", "FRA", "JPN", "AUS", "ROU", "KOR")


```

```{r}
# if the athlete is not in one of the countries that already qualified, they are
# filed as having the country "Other" and will compete in individual events 
# but not in the team events. 

all_elites_c <- all_elites 

all_elites_c$clean_country <- ifelse(all_elites_c$clean_country %in% women_country, 
                                     all_elites_c$clean_country, 
                                     "Other")

all_elites_other <- all_elites_c %>%
    filter(clean_country == "Other") 
```

```{r}
# Create a function to simulate a score for a given athlete and given event
# based off of the athlete's previous scores on the event within the last two yrs. 

simulate_score_w <- function(athlete, event) {
  
  # filter to get all past data of athlete on this event
  athlete_data <- df_women_c%>%
    filter(clean_name == athlete, Apparatus == event)
  
  # if the athlete has no past data, the score is 0
  if(nrow(athlete_data)==0){
    score = 0
    return(score)
  
  # if athlete only has one datapoint to reference, we will create a small normal
  # around this point and sample directly.
  }else if (nrow(athlete_data)==1){
    poss_scores <- rnorm(n = 30, mean = athlete_data$Score, sd = 0.1)
    score = sample(poss_scores, size = 1)
    return(score)
    
  # also if athlete scores are multiple identical scores
  }else if (all(athlete_data$Score == athlete_data$Score[1])){
    poss_scores <- rnorm(n = 30, mean = athlete_data$Score[1], sd = 0.1)
    score = sample(poss_scores, size = 1)
    return(score)
    
      
   # else get string of scores and create a kernel density estimate of pdf   
  } else{
    scores <- athlete_data$Score
    
    # density function takes on default of gaussian kernel and default bandwidth
    density_estimate = density(scores)
    
    # we sample one point from the estimated kernel density pdf
    score <- sample(density_estimate$x, size = 1, prob = density_estimate$y)
    return(score)
  }
}
```

```{r}
# for a certain event (or individual AA / individual vault need to sum up events) 
# and a certain set of athletes return the winners data set
# (note winners cannot all be from same country, max 2 from same country)

set.seed(21)

# function takes event, a dataset of athletes, (and if necessary,  a country filter)
# country filter is to make this a multi-use function later on to select best 3 athletes
# a country may use for a event in the all around competition

event_sim_indiv <- function(event_set, dataset = all_elites, country = NA){
  
  all_elites_event <- dataset
  
  # for each event, simulate athletes performances
  for (event in event_set){
    
    # create a vector of the athletes performances in this event
    all_points = c()
    for (athlete in all_elites_event$clean_name){
      points <- simulate_score_w(athlete, event)
      all_points <- c(all_points, points)
    }
    
    # attaching to the original dataset the simulated performances
    col_name <- paste("event_", event, sep= "")
    all_elites_event[, col_name] <- all_points
    
  }
  
  # summing up the scores across the events to determine winners
  columns_to_exclude <- c("clean_name", "clean_country")
  all_elites_event$sum_score <- rowSums(all_elites_event[, !names(all_elites_event) %in% columns_to_exclude])
  winners <- all_elites_event%>%
    arrange(desc(sum_score))%>%
    slice(1:3)
  
  # we cannot have all three winners be from the same country as per rules of world competitions
  # check if all winners are from same country, if yes, get the 4th highest score.
  all_same <- all(winners$clean_country == winners$clean_country[1])
  # all_same <- TRUE
  if (all_same){
    winners <- all_elites_event%>%
    arrange(desc(sum_score))%>%
    slice(1:2, 4)
  }
  

  medal_count <- c(3,2,1)
  winners <- cbind(winners, medal_count = medal_count)
  
  return(winners)
  
}
```

### Weighting stuff

```{r}
# Create a function to find the median score of the kernel pdf created for a 
# given athlete and given event


median_of_kernel <- function(athlete, event) {
  
  # filter to get all past data of athlete on this event
  athlete_data <- df_women_c%>%
    filter(clean_name == athlete, Apparatus == event)
  
  # if the athlete has no past data, the median score is 0
  if(nrow(athlete_data)==0){
    median_score = 0
    return(median_score)
    
  # if athlete only has one datapoint to reference, that is used as median
  }else if (nrow(athlete_data)==1){
    median_score <- athlete_data$Score
    return(median_score)  
  }else if (all(athlete_data$Score == athlete_data$Score[1])){
    median_score <- athlete_data$Score[1] 
    return(median_score)  
      
  # else get string of scores and create a kernel density estimate of pdf
  } else{
    scores <- athlete_data$Score
    
    # density function takes on default of gaussian kernel and default bandwidth
    density_estimate = density(scores)
    
    # we want to get the median of the pdf
    # first create the cdf
    cdf <- cumsum(density_estimate$y) * diff(density_estimate$x[1:2])

    # Find the index where the CDF is closest to 0.5
    median_index <- which.min(abs(cumsum(cdf) - 0.5))
    
    # Extract the median value from the x-values
    median_score <- density_estimate$x[median_index]

    return(median_score)
  }
}

```

```{r}
# for a certain athlete return the average of their median scores across events
# we are returning average instead of sum to account for specialization of athletes

set.seed(21)

women_events <- c("BB", "FX", "UB", "VT1", "VT2")
finding_weights <- function(dataset = all_elites_c, events = women_events){
  
  all_elites_event <- dataset

  # for each event, simulate athletes performances
  for (event in women_events){
    
    # create a vector of the athletes performances in this event
    all_medians = c()
    for (athlete in all_elites_event$clean_name){
      median <- median_of_kernel(athlete, event)
      all_medians <- c(all_medians, median)
    }
    
    # attaching to the original dataset the simulated performances
    col_name <- paste("event_", event, sep= "")
    all_elites_event[, col_name] <- all_medians
  }
  
  # to not overcount the presence of vault, we aggregate the two vault scores into one
  all_elites_event <- all_elites_event%>%
    mutate(event_VT = (event_VT1+event_VT2)/2)%>%
    select(-c("event_VT1", "event_VT2"))
  
  # summing up the median scores across the events
  columns_to_exclude <- c("clean_name", "clean_country")
  all_elites_event$sum_score <- rowSums(all_elites_event[, !names(all_elites_event) %in% columns_to_exclude])
  
  # counting how many median scores are non zeros (how many events the athlete has scores in)
  columns_to_exclude <- c("clean_name", "clean_country", "sum_score")
  all_elites_event$non_zero_count <- rowSums(all_elites_event[,
                                  !names(all_elites_event) %in% columns_to_exclude] != 0)
  
  # averaging the medians to create the weights but 
  # dividing by (number of events +1) to bias towards all around gymnasts
  all_elites_event$avg_medians <- all_elites_event$sum_score/(all_elites_event$non_zero_count+1)
  return(all_elites_event)
  
}


```

```{r}
# finding weights for all_elites_c
weights_df <- finding_weights()
hist(exp(weights_df$avg_medians))

# Adjusting the weights to stretch them out 
# (bigger difference in weights between top and mediocre athletes)
weights_df <- weights_df%>%
  mutate(adjusted_weights = exp(avg_medians))

# look at the adjusted weights and sanity check that it makes sense for USA
weights_df%>%
  arrange(desc(adjusted_weights))%>%
  filter(clean_country == "USA")
```

```{r}
# Randomly sampling (weighted random sample) five athletes per country for the teams
# will take the data frame with weights assigned and spit out dataset with all 
# athletes that are competing for a national team in one simulated olympics.
get_teams <- function(data = weights_df){
  all_elites_teams <- weights_df %>%
    
  # not including "country == other" because those countries are not good enough 
  # to get a team at the olympics
  filter(clean_country != "Other") %>%
    
  # grouping by country to sample for each country
  group_by(clean_country) %>%
    
  # weighting by the adjusted weights
  slice(sample(row_number(), size = 5, prob = adjusted_weights)) %>%
  ungroup()
  
  # selecting for only necessary columns
  all_elites_teams <- all_elites_teams%>%
    select(clean_name, clean_country)
  return(all_elites_teams)
}

# sanity check
teams <- get_teams()
teams%>%
  filter(clean_country == "USA")
```

```{r}
# For a given event and set of athletes and country select the predicted winners 
# Used to select the three best athletes for each event out of a 5 person team

event_sim_team <- function(event, dataset = all_elites, country){
  all_elites_event <- dataset

  all_elites_event <- all_elites_event %>%
    filter(clean_country == country)
  
  all_points = c()
  for (athlete in all_elites_event$clean_name){
    points <- simulate_score_w(athlete, event)
    all_points <- c(all_points, points)
  }
  col_name <- "sum_score"
  all_elites_event[, col_name] <- all_points
    

  winners <- all_elites_event%>%
    arrange(desc(sum_score))%>%
    slice(1:3)
  
  all_same <- all(winners$clean_country == winners$clean_country[1])
  all_same <- TRUE
  if (all_same){
    winners <- all_elites_event%>%
    arrange(desc(sum_score))%>%
    slice(1:2, 4)
  }
  
  winners$apparatus <- rep(event, nrow(winners))
  return(winners)
  
}
```

```{r}
# sanity check 
# these are the athletes that will be competing in balance beam for USA in the team all around
event_sim_team("BB", country ="USA")
```

```{r}
# Given a certain set of teams in the olympics
# return all the athletes who will be competing for the team all around (specifying which event they are competing in as well)

find3_country <- function(){
  apparatuses_w = c("BB", "FX", "UB", "VT")
  top_athletes <- data.frame(clean_country = character(),apparatus = character(), clean_name = character(), sum_score = numeric())
  for (country in women_country) {
      for (apparatus in apparatuses_w){
        top3 <- event_sim_team(apparatus, teams, country)
        top_athletes <- rbind(top_athletes, top3)
      }
     
  }
  return(top_athletes)
}
```

```{r}
# sanity check of results from a certain team

find3_country()
```

```{r}
#Returns the scores of the athletes per apparatus
event_sim <- function(event, dataset = all_elites){
  all_elites_event <- dataset
  
  all_points = c()
  for (athlete in all_elites_event$clean_name){
    points <- simulate_score_w(athlete, event)
    all_points <- c(all_points, points)
  }
  col_name <- "sum_score"
  all_elites_event[, col_name] <- all_points
  return(all_elites_event)
  
}
```

```{r}
Team_AA_sim_w <- function(df = top_athletes){
  apparatuses_w = c("BB", "FX", "UB", "VT")
  total_scores <- data.frame(clean_country = character(), sum_score = numeric())
  
  
  
  for (app in apparatuses_w){
    
    subset <- df[df$apparatus == app,] %>%
      select(-c(sum_score))
    
    event_df <- event_sim(app, subset)
    
    total_scores <- rbind(total_scores, event_df)
  
  }
  
  country_scores <- total_scores %>% 
    group_by(clean_country) %>%
    mutate(final_scores = sum(sum_score))%>%
    distinct(clean_country, final_scores)%>%
    arrange(desc(final_scores)) %>%
    head(3)
  
  medal_count <- c(3,2,1)
  winners <- cbind(country_scores, Team_AA_medal = medal_count)
  return(winners)
  

}
```

```{r}
setClass(
  "GymnasticSimulation",
  representation(
    teamSummary = "data.frame",
    teamAllAround = "data.frame",
    indivAllAround = "data.frame",
    BB = "data.frame",
    VT = "data.frame",
    FX = "data.frame", 
    UB = "data.frame"
  )
)

# Create a constructor function
GymnasticSimulation <- function(teamSummary = data.frame(),
                                teamAllAround = data.frame(),
                                indivAllAround = data.frame(),
                                BB = data.frame(),
                                VT = data.frame(),
                                FX = data.frame(),
                                UB = data.frame()
                              
                                 ) {
  new("GymnasticSimulation",
      teamSummary = teamSummary,
      teamAllAround = teamAllAround,
      indivAllAround = indivAllAround,
      BB = BB,
      VT = VT,
      FX = FX,
      UB = UB)
}



```

```{r}

# Number of simulations
numSimulations <- 1

# Create a list to store simulations
simulations <- list()

# Run the loop to initialize simulations
for (i in 1:numSimulations) {
  #set up the different groups
  teams <- get_teams()
  all_indiv <- rbind(teams, all_elites_other)
  
  
  #start simulating all events
  #simulation_start <- Sys.time()
  
  top_athletes <- find3_country()
  
  #team_checkpoint <- Sys.time()
  
  team_result <- Team_AA_sim_w(top_athletes)
  
  #check_point <- Sys.time()
  
  indivAA_result <- event_sim_indiv(c("BB", "VT", "FX", "UB"), all_indiv)
  BB_result <- event_sim_indiv(c("BB"), all_indiv)
  VT_result <- event_sim_indiv(c("VT1", "VT2"), all_indiv)
  FX_result <- event_sim_indiv(c("FX"), all_indiv)
  UB_result <- event_sim_indiv(c("UB"), all_indiv)
  
  #simulation_end <- Sys.time()
  #team_duration <- team_checkpoint - simulation_start
  #individual_duration <- simulation_end - check_point
  #simulation_duration <- simulation_end - simulation_start
  #cat("team duration", team_duration, "\n")
  #cat("individual duration", individual_duration, "\n")
  #cat("simulation duration", simulation_duration, "\n")
  
  #creating dataframes
  unique_countries <- unique(all_indiv$clean_country)
  summaryTeam <- tibble(clean_country = unique_countries)
  summaryTeam <- summaryTeam %>%
    mutate(
    athletes = map(clean_country, ~all_indiv$clean_name[all_indiv$clean_country == .x])
  )
  team_medal <- team_result %>%
    select(-c("final_scores"))
  summaryTeam <- left_join(summaryTeam, team_medal, by = "clean_country")
  
  indiv_grouped <- indivAA_result %>%
    group_by(clean_country) %>%
    summarize(indiv_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, indiv_grouped, by = "clean_country")
  
  VT_grouped <- VT_result %>%
    group_by(clean_country) %>%
    summarize(VT_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, VT_grouped, by = "clean_country")
  
  BB_grouped <- BB_result %>%
    group_by(clean_country) %>%
    summarize(BB_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, BB_grouped, by = "clean_country")
  
  FX_grouped <- FX_result %>%
    group_by(clean_country) %>%
    summarize(FX_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, FX_grouped, by = "clean_country")
  
  UB_grouped <- UB_result %>%
    group_by(clean_country) %>%
    summarize(UB_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, UB_grouped, by = "clean_country")
  
  
  #dataframe_end <- Sys.time()
  #dataframe_duration <- simulation_end - dataframe_end
  #cat("dataframe duration", dataframe_duration, "\n")
  
  #find the final number of medals
  summaryTeam[is.na(summaryTeam)] <- 0
  columns_to_exclude <- c("athletes", "clean_country")
  summaryTeam$total_medals <- rowSums(summaryTeam[, !names(summaryTeam) %in% columns_to_exclude])
  
  #calculation_end <- Sys.time()
  #calculation_duration <- dataframe_end - calculation_end
  #cat("calculation duration", calculation_duration, "\n")
  
  #saving it all down finally
  simulation <- GymnasticSimulation()

  simulation@teamSummary <- summaryTeam
  simulation@teamAllAround <- team_result
  simulation@indivAllAround <- indivAA_result
  simulation@BB <- BB_result
  simulation@VT<- VT_result
  simulation@FX<- FX_result
  simulation@UB<- UB_result
  simulations[[i]] <- simulation
  
  #record_end <- Sys.time()
  #record_duration <- calculation_end - record_end
  #cat("record duration", record_duration, "\n")
}


```

```{r}
table_summary <- simulations[[1]]@teamSummary
table_summary %>%
  arrange(desc(total_medals))
```

```{r}
summaryTeam <- simulations[[1]]@teamSummary
USA_medals <- summaryTeam$total_medals[summaryTeam$clean_country == "USA"]

USA_medals  

```

```{r}
max_medals <- -1
max_sim_index <- -1

for (i in seq_along(simulations)){
  summaryTeam <- simulations[[i]]@teamSummary
  USA_medals <- summaryTeam$total_medals[summaryTeam$clean_country == "USA"]
  
  if (USA_medals>max_medals){
    max_medals <- USA_medals
    max_sim_index <- i
  }
}
```

```{r}
maxUSA_sim <- simulations[[max_sim_index]]@teamSummary
```

```{r}
print(maxUSA_sim$athletes[maxUSA_sim$clean_country == "USA"])
```

```{r}
print(max_medals)
```

```{r}
saveRDS(simulations, file = "simulations.rds")
```

```{r}
loaded_simulations <- readRDS("simulations.rds")
```
