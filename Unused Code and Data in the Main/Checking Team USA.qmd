---
title: "Checking Team USA"
format: pdf
editor: visual
---

## Men's

```{r}
library(ggplot2)
library(tidyverse)
```

```{r}
check_m_usa <- m_team_usa %>%
  select(name, clean_country) %>%
  distinct(name, clean_country)

check_m_usa$clean_name <- check_m_usa$name

check_m_usa$name <- NULL
```

```{r}
get_teams <- function(data = weights_df_m){
  all_elites_teams <- weights_df_m %>%
    
  # not including "country == other" because those countries are not good enough 
  # to get a team at the olympics
  filter(clean_country != "Other") %>%
  filter(clean_country != "USA") %>%
    
  # grouping by country to sample for each country
  group_by(clean_country) %>%
    
  # weighting by the adjusted weights
  slice(sample(row_number(), size = 5, prob = adjusted_weights)) %>%
  ungroup()
  
  # selecting for only necessary columns
  all_elites_teams <- all_elites_teams%>%
    select(clean_name, clean_country)
  return(all_elites_teams)
}

# sanity check
teams_check <- get_teams()

```

```{r}
setClass(
  "GymnasticSimulation",
  representation(
    teamSummary = "data.frame",
    teamAllAround = "data.frame",
    indivAllAround = "data.frame",
    VT = "data.frame",
    SR = "data.frame",
    PH = "data.frame", 
    PB = "data.frame", 
    HB = "data.frame",
    FX = "data.frame"
  )
)

# Create a constructor function
GymnasticSimulation <- function(teamSummary = data.frame(),
                                teamAllAround = data.frame(),
                                indivAllAround = data.frame(),
                                VT = data.frame(),
                                SR = data.frame(),
                                PH = data.frame(), 
                                PB = data.frame(), 
                                HB = data.frame(),
                                FX = data.frame()
                              
                                 ) {
  new("GymnasticSimulation",
      teamSummary = teamSummary,
      teamAllAround = teamAllAround,
      indivAllAround = indivAllAround,
      VT = VT,
      SR = SR,
      PH = PH,
      PB = PB, 
      HB = HB, 
      FX = FX)
}
```

```{r}
set.seed(5)
# Number of simulations
numSimulations <- 100

# Create a list to store simulations
simulations_m <- list()

# Run the loop to initialize simulations
for (i in 1:numSimulations) {
  #set up the different groups
  teams <- get_teams()
  teams <- rbind(teams, check_m_usa)
  all_indiv <- rbind(teams, all_elites_other_m)
  
  
  #start simulating all events
  #simulation_start <- Sys.time()
  
  top_athletes <- find3_country()
  
  #team_checkpoint <- Sys.time()
  
  team_result <- Team_AA_sim_m(top_athletes)
  
  #check_point <- Sys.time()
  
  indivAA_result <- event_sim_indiv_m(c("VT", "SR", "PH", "PB", "HB", "FX"), all_indiv)
  SR_result <- event_sim_indiv_m(c("SR"), all_indiv)
  VT_result <- event_sim_indiv_m(c("VT1", "VT2"), all_indiv)
  PH_result <- event_sim_indiv_m(c("PH"), all_indiv)
  PB_result <- event_sim_indiv_m(c("PB"), all_indiv)
  HB_result <- event_sim_indiv_m(c("HB"), all_indiv)
  FX_result <- event_sim_indiv_m(c("FX"), all_indiv)
  
  #simulation_end <- Sys.time()
  #team_duration <- team_checkpoint - simulation_start
  #individual_duration <- simulation_end - check_point
  #simulation_duration <- simulation_end - simulation_start
  #cat("team duration", team_duration, "\n")
  #cat("individual duration", individual_duration, "\n")
  #cat("simulation duration", simulation_duration, "\n")
  
  #creating dataframes
  unique_countries <- unique(all_indiv$clean_country)
  summaryTeam <- tibble(clean_country = unique_countries)
  summaryTeam <- summaryTeam %>%
    mutate(
    athletes = map(clean_country, ~all_indiv$clean_name[all_indiv$clean_country == .x])
  )
  team_medal <- team_result %>%
    select(-c("final_scores"))
  summaryTeam <- left_join(summaryTeam, team_medal, by = "clean_country")
  
  indiv_grouped <- indivAA_result %>%
    group_by(clean_country) %>%
    summarize(indiv_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, indiv_grouped, by = "clean_country")
  
  VT_grouped <- VT_result %>%
    group_by(clean_country) %>%
    summarize(VT_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, VT_grouped, by = "clean_country")
  
  SR_grouped <- SR_result %>%
    group_by(clean_country) %>%
    summarize(SR_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, SR_grouped, by = "clean_country")
  
  FX_grouped <- FX_result %>%
    group_by(clean_country) %>%
    summarize(FX_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, FX_grouped, by = "clean_country")
  
  PH_grouped <- PH_result %>%
    group_by(clean_country) %>%
    summarize(PH_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, PH_grouped, by = "clean_country")
  
  PB_grouped <- PB_result %>%
    group_by(clean_country) %>%
    summarize(PB_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, PB_grouped, by = "clean_country")
  
  HB_grouped <- HB_result %>%
    group_by(clean_country) %>%
    summarize(HB_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, HB_grouped, by = "clean_country")
  
  
  #dataframe_end <- Sys.time()
  #dataframe_duration <- simulation_end - dataframe_end
  #cat("dataframe duration", dataframe_duration, "\n")
  
  #find the final number of medals
  summaryTeam[is.na(summaryTeam)] <- 0
  columns_to_exclude <- c("athletes", "clean_country")
  summaryTeam$total_medals <- rowSums(summaryTeam[, !names(summaryTeam) %in% columns_to_exclude])
  
  #calculation_end <- Sys.time()
  #calculation_duration <- dataframe_end - calculation_end
  #cat("calculation duration", calculation_duration, "\n")
  
  #saving it all down finally
  simulation <- GymnasticSimulation()

  simulation@teamSummary <- summaryTeam
  simulation@teamAllAround <- team_result
  simulation@indivAllAround <- indivAA_result
  simulation@PB <- PB_result
  simulation@VT<- VT_result
  simulation@FX<- FX_result
  simulation@HB<- HB_result
  simulation@SR<- SR_result
  simulation@PH<- PH_result
  simulations_m[[i]] <- simulation
  
  #print(i)
  
  #record_end <- Sys.time()
  #record_duration <- calculation_end - record_end
  #cat("record duration", record_duration, "\n")
}
```

```{r}
saveRDS(simulations_m, file = "check_m_simulations.rds")
```

```{r}
check_m_simulations <- readRDS("check_m_simulations.rds")
```

```{r}
winning_countries <- c()

for (i in seq_along(check_m_simulations)){
  team_summary <- check_m_simulations[[i]]@teamSummary
  
  top_countries <- team_summary %>%
    arrange(desc(total_medals))
  
  winning_country = top_countries$clean_country[1]
  
  if(winning_country == "Other"){
    winning_country = top_countries$clean_country[2]
  }
  
  
  winning_countries <- c(winning_countries, winning_country)
}
```

```{r}
winning_countries 
```

```{r}
country_counts <- table(winning_countries)
country_counts
```

```{r}
#sanity_check <- check_m_simulations[[1]]@teamSummary
```

```{r}
winning_individuals <- c()

for (i in seq_along(check_m_simulations)){
  team_summary <- check_m_simulations[[i]]@teamSummary
  
  indiv_medal <- team_summary$indiv_medal
  
  winning_indiv <- team_summary$clean_country[which.max(indiv_medal)]
  
  winning_individuals <- c(winning_individuals, winning_indiv)
}
```

```{r}
winning_individuals
```

```{r}
winning_teams <- c()

for (i in seq_along(check_m_simulations)){
  team_summary <- check_m_simulations[[i]]@teamSummary
  
  team_medal <- team_summary$Team_AA_medal
  
  winning_t <- team_summary$clean_country[which.max(team_medal)]
  
  winning_teams <- c(winning_teams, winning_t)
}
```

```{r}
winning_teams
```

```{r}
country_counts <- table(winning_individuals)
country_counts["USA"]
```

```{r}
team_counts <- table(winning_teams)
team_counts["USA"]
```

```{r}
aggregated_heatmap_data <- data.frame(Country = character(), Event = character(), Medals = numeric(), stringsAsFactors = FALSE)

# Loop through simulations
for (i in seq_along(check_m_simulations)) {
  # Access the team_summary_dataframe from the current simulation
  team_summary <- check_m_simulations[[i]]@teamSummary
  
  # Identify individual event columns (assuming they have the "_Medal" suffix)
  event_columns <- grep("_medal$", names(team_summary), value = TRUE)
  
  # Aggregate medals across events for each country in the current simulation
  aggregated_data <- aggregate(team_summary[, c(event_columns, "total_medals")], by = list(Country = team_summary$clean_country), sum)
  
  # Append the aggregated data to the overall data frame
  aggregated_heatmap_data <- rbind(aggregated_heatmap_data, aggregated_data)
}
```

```{r}
long_format_data <- aggregated_heatmap_data %>%
  select(-c("total_medals")) %>%
  gather(key = "Event", value = "Medals", -Country)
```

```{r}
ggplot(long_format_data, aes(x = Country, y = Event, fill = Medals)) +
  geom_tile() +
   scale_fill_gradient(low = "darkblue", high = "gold", limits = c(0, max(long_format_data$Medals))) +
  labs(title = "Aggregated Country Performance Across Events",
       x = "Country",
       y = "Event",
       fill = "Medals") +
  theme_minimal()
```

## Women's

```{r}
check_w_usa <- w_team_usa %>%
  select(name, clean_country) %>%
  distinct(name, clean_country)
```

```{r}
check_w_usa$clean_name <- check_w_usa$name

check_w_usa$name <- NULL
```

```{r}
# Randomly sampling (weighted random sample) five athletes per country for the teams
# will take the data frame with weights assigned and spit out dataset with all 
# athletes that are competing for a national team in one simulated olympics.
get_teams <- function(data = weights_df){
  all_elites_teams <- weights_df %>%
    
  # not including "country == other" because those countries are not good enough 
  # to get a team at the olympics
  filter(clean_country != "Other") %>%
  filter(clean_country != "USA") %>%
    
  # grouping by country to sample for each country
  group_by(clean_country) %>%
    
  # weighting by the adjusted weights
  slice(sample(row_number(), size = 5, prob = adjusted_weights)) %>%
  ungroup()
  
  # selecting for only necessary columns
  all_elites_teams <- all_elites_teams%>%
    select(clean_name, clean_country)
  return(all_elites_teams)
}

# sanity check
teams_check <- get_teams()

```

```{r}
setClass(
  "GymnasticSimulation",
  representation(
    teamSummary = "data.frame",
    teamAllAround = "data.frame",
    indivAllAround = "data.frame",
    BB = "data.frame",
    VT = "data.frame",
    FX = "data.frame", 
    UB = "data.frame"
  )
)

# Create a constructor function
GymnasticSimulation <- function(teamSummary = data.frame(),
                                teamAllAround = data.frame(),
                                indivAllAround = data.frame(),
                                BB = data.frame(),
                                VT = data.frame(),
                                FX = data.frame(),
                                UB = data.frame()
                              
                                 ) {
  new("GymnasticSimulation",
      teamSummary = teamSummary,
      teamAllAround = teamAllAround,
      indivAllAround = indivAllAround,
      BB = BB,
      VT = VT,
      FX = FX,
      UB = UB)
}

```

```{r}
set.seed(13)
# Number of simulations
numSimulations <- 100

# Create a list to store simulations
simulations <- list()

# Run the loop to initialize simulations
for (i in 1:numSimulations) {
  #set up the different groups
  teams <- get_teams()
  teams <- rbind(teams, check_w_usa)
  all_indiv <- rbind(teams, all_elites_other)
  
  
  #start simulating all events
  #simulation_start <- Sys.time()
  
  top_athletes <- find3_country()
  
  #team_checkpoint <- Sys.time()
  
  team_result <- Team_AA_sim_w(top_athletes)
  
  #check_point <- Sys.time()
  
  indivAA_result <- event_sim_indiv(c("BB", "VT", "FX", "UB"), all_indiv)
  BB_result <- event_sim_indiv(c("BB"), all_indiv)
  VT_result <- event_sim_indiv(c("VT1", "VT2"), all_indiv)
  FX_result <- event_sim_indiv(c("FX"), all_indiv)
  UB_result <- event_sim_indiv(c("UB"), all_indiv)
  
  #simulation_end <- Sys.time()
  #team_duration <- team_checkpoint - simulation_start
  #individual_duration <- simulation_end - check_point
  #simulation_duration <- simulation_end - simulation_start
  #cat("team duration", team_duration, "\n")
  #cat("individual duration", individual_duration, "\n")
  #cat("simulation duration", simulation_duration, "\n")
  
  #creating dataframes
  unique_countries <- unique(all_indiv$clean_country)
  summaryTeam <- tibble(clean_country = unique_countries)
  summaryTeam <- summaryTeam %>%
    mutate(
    athletes = map(clean_country, ~all_indiv$clean_name[all_indiv$clean_country == .x])
  )
  team_medal <- team_result %>%
    select(-c("final_scores"))
  summaryTeam <- left_join(summaryTeam, team_medal, by = "clean_country")
  
  indiv_grouped <- indivAA_result %>%
    group_by(clean_country) %>%
    summarize(indiv_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, indiv_grouped, by = "clean_country")
  
  VT_grouped <- VT_result %>%
    group_by(clean_country) %>%
    summarize(VT_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, VT_grouped, by = "clean_country")
  
  BB_grouped <- BB_result %>%
    group_by(clean_country) %>%
    summarize(BB_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, BB_grouped, by = "clean_country")
  
  FX_grouped <- FX_result %>%
    group_by(clean_country) %>%
    summarize(FX_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, FX_grouped, by = "clean_country")
  
  UB_grouped <- UB_result %>%
    group_by(clean_country) %>%
    summarize(UB_medal = sum(medal_count)) 
  summaryTeam <- left_join(summaryTeam, UB_grouped, by = "clean_country")
  
  
  #dataframe_end <- Sys.time()
  #dataframe_duration <- simulation_end - dataframe_end
  #cat("dataframe duration", dataframe_duration, "\n")
  
  #find the final number of medals
  summaryTeam[is.na(summaryTeam)] <- 0
  columns_to_exclude <- c("athletes", "clean_country")
  summaryTeam$total_medals <- rowSums(summaryTeam[, !names(summaryTeam) %in% columns_to_exclude])
  
  #calculation_end <- Sys.time()
  #calculation_duration <- dataframe_end - calculation_end
  #cat("calculation duration", calculation_duration, "\n")
  
  #saving it all down finally
  simulation <- GymnasticSimulation()

  simulation@teamSummary <- summaryTeam
  simulation@teamAllAround <- team_result
  simulation@indivAllAround <- indivAA_result
  simulation@BB <- BB_result
  simulation@VT<- VT_result
  simulation@FX<- FX_result
  simulation@UB<- UB_result
  simulations[[i]] <- simulation
  
  #record_end <- Sys.time()
  #record_duration <- calculation_end - record_end
  #cat("record duration", record_duration, "\n")
}
```

```{r}
#CHANGE FILE NAME WHEN RUNNING EACH TIME
saveRDS(simulations, file = "check_w_simulations.rds")
```

```{r}
check_w_simulations <- readRDS("check_w_simulations.rds")
```

```{r}
winning_countries_w <- c()

for (i in seq_along(check_w_simulations)){
  team_summary <- check_w_simulations[[i]]@teamSummary
  
  total_medals <- team_summary$total_medals
  
  winning_country <- team_summary$clean_country[which.max(total_medals)]
  
  winning_countries_w <- c(winning_countries_w, winning_country)
}
```

```{r}
winning_countries_w
```

```{r}
aggregated_heatmap_data_w <- data.frame(Country = character(), Event = character(), Medals = numeric(), stringsAsFactors = FALSE)

# Loop through simulations
for (i in seq_along(check_w_simulations)) {
  # Access the team_summary_dataframe from the current simulation
  team_summary <- check_w_simulations[[i]]@teamSummary
  
  # Identify individual event columns (assuming they have the "_Medal" suffix)
  event_columns <- grep("_medal$", names(team_summary), value = TRUE)
  
  # Aggregate medals across events for each country in the current simulation
  aggregated_data <- aggregate(team_summary[, c(event_columns, "total_medals")], by = list(Country = team_summary$clean_country), sum)
  
  # Append the aggregated data to the overall data frame
  aggregated_heatmap_data_w <- rbind(aggregated_heatmap_data_w, aggregated_data)
}
```

```{r}
long_format_data_w <- aggregated_heatmap_data_w %>%
  select(-c("total_medals")) %>%
  gather(key = "Event", value = "Medals", -Country)
```

```{r}
ggplot(long_format_data_w, aes(x = Country, y = Event, fill = Medals)) +
  geom_tile() +
   scale_fill_gradient(low = "darkblue", high = "gold", limits = c(0, max(long_format_data_w$Medals))) +
  labs(title = "Aggregated Country Performance Across Events",
       x = "Country",
       y = "Event",
       fill = "Medals") +
  theme_minimal() 
```
